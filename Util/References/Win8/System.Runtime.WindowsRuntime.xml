<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.WindowsRuntime</name>
  </assembly>
  <members>
    <member name="T:System.WindowsRuntimeSystemExtensions">
      <summary>Provides extension methods for converting between tasks and Windows Runtime asynchronous actions and operations. </summary>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsAsyncAction(System.Threading.Tasks.Task)">
      <summary>Returns a Windows Runtime asynchronous action that represents a started task. </summary>
      <returns>A Windows.Foundation.IAsyncAction instance that represents the started task. </returns>
      <param name="source">The started task. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is an unstarted task. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsAsyncOperation``1(System.Threading.Tasks.Task{``0})">
      <summary>Returns a Windows Runtime asynchronous operation that represents a started task that returns a result. </summary>
      <returns>A Windows.Foundation.IAsyncOperation&lt;TResult&gt; instance that represents the started task. </returns>
      <param name="source">The started task. </param>
      <typeparam name="TResult">The type that returns the result. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> is an unstarted task. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction)">
      <summary>Returns a task that represents a Windows Runtime asynchronous action. </summary>
      <returns>A task that represents the asynchronous action. </returns>
      <param name="source">The asynchronous action. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask(Windows.Foundation.IAsyncAction,System.Threading.CancellationToken)">
      <summary>Returns a task that represents a Windows Runtime asynchronous action that can be cancelled. </summary>
      <returns>A task that represents the asynchronous action. </returns>
      <param name="source">The asynchronous action. </param>
      <param name="cancellationToken">A token that can be used to request cancellation of the asynchronous action. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0})">
      <summary>Returns a task that represents a Windows Runtime asynchronous action. </summary>
      <returns>A task that represents the asynchronous action. </returns>
      <param name="source">The asynchronous action. </param>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.IProgress{``0})">
      <summary>Returns a task that represents a Windows Runtime asynchronous action that reports progress. </summary>
      <returns>A task that represents the asynchronous action. </returns>
      <param name="source">The asynchronous action. </param>
      <param name="progress">An object that receives progress updates. </param>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken)">
      <summary>Returns a task that represents a Windows Runtime asynchronous action that can be cancelled. </summary>
      <returns>A task that represents the asynchronous action. </returns>
      <param name="source">The asynchronous action. </param>
      <param name="cancellationToken">A token that can be used to request cancellation of the asynchronous action. </param>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncActionWithProgress{``0},System.Threading.CancellationToken,System.IProgress{``0})">
      <summary>Returns a task that represents a Windows Runtime asynchronous action that reports progress and can be cancelled.</summary>
      <returns>A task that represents the asynchronous action. </returns>
      <param name="source">The asynchronous action. </param>
      <param name="cancellationToken">A token that can be used to request cancellation of the asynchronous action. </param>
      <param name="progress">An object that receives progress updates. </param>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0})">
      <summary>Returns a task that represents a Windows Runtime asynchronous operation returns a result. </summary>
      <returns>A task that represents the asynchronous operation. </returns>
      <param name="source">The asynchronous operation. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``1(Windows.Foundation.IAsyncOperation{``0},System.Threading.CancellationToken)">
      <summary>Returns a task that represents a Windows Runtime asynchronous operation that returns a result and can be cancelled. </summary>
      <returns>A task that represents the asynchronous operation. </returns>
      <param name="source">The asynchronous operation. </param>
      <param name="cancellationToken">A token that can be used to request cancellation of the asynchronous operation. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})">
      <summary>Returns a task that represents a Windows Runtime asynchronous operation returns a result. </summary>
      <returns>A task that represents the asynchronous operation. </returns>
      <param name="source">The asynchronous operation. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation. </typeparam>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.IProgress{``1})">
      <summary>Returns a task that represents  Windows Runtime asynchronous operation that returns a result and reports progress. </summary>
      <returns>A task that represents the asynchronous operation. </returns>
      <param name="source">The asynchronous operation. </param>
      <param name="progress">An object that receives progress updates. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation. </typeparam>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken)">
      <summary>Returns a task that represents a Windows Runtime asynchronous operation that returns a result and can be cancelled. </summary>
      <returns>A task that represents the asynchronous operation. </returns>
      <param name="source">The asynchronous operation. </param>
      <param name="cancellationToken">A token that can be used to request cancellation of the asynchronous operation. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation. </typeparam>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.AsTask``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1},System.Threading.CancellationToken,System.IProgress{``1})">
      <summary>Returns a task that represents a Windows Runtime asynchronous operation that returns a result, reports progress, and can be cancelled. </summary>
      <returns>A task that represents the asynchronous operation. </returns>
      <param name="source">The asynchronous operation. </param>
      <param name="cancellationToken">A token that can be used to request cancellation of the asynchronous operation. </param>
      <param name="progress">An object that receives progress updates. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation. </typeparam>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.GetAwaiter(Windows.Foundation.IAsyncAction)">
      <summary>Returns an object that awaits an asynchronous action. </summary>
      <returns>An object that awaits the specified asynchronous action. </returns>
      <param name="source">The asynchronous action to await. </param>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncActionWithProgress{``0})">
      <summary>Returns an object that awaits an asynchronous action that reports progress. </summary>
      <returns>An object that awaits the specified asynchronous action. </returns>
      <param name="source">The asynchronous action to await. </param>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.GetAwaiter``1(Windows.Foundation.IAsyncOperation{``0})">
      <summary>Returns an object that awaits an asynchronous operation that returns a result.</summary>
      <returns>An object that awaits the specified asynchronous operation. </returns>
      <param name="source">The asynchronous operation to await. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation. </typeparam>
    </member>
    <member name="M:System.WindowsRuntimeSystemExtensions.GetAwaiter``2(Windows.Foundation.IAsyncOperationWithProgress{``0,``1})">
      <summary>Returns an object that awaits an asynchronous operation that reports progress and returns a result. </summary>
      <returns>An object that awaits the specified asynchronous operation. </returns>
      <param name="source">The asynchronous operation to await. </param>
      <typeparam name="TResult">The type of object that returns the result of the asynchronous operation.</typeparam>
      <typeparam name="TProgress">The type of object that provides data that indicates progress. </typeparam>
    </member>
    <member name="T:System.IO.WindowsRuntimeStorageExtensions">
      <summary>Contains extension methods for the IStorageFile and IStorageFolder interfaces in the Windows Runtime when developing Windows Metro style apps.</summary>
    </member>
    <member name="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFile)">
      <summary>Retrieves a stream for reading from a specified file.</summary>
      <returns>A task that represents the asynchronous read operation.</returns>
      <param name="windowsRuntimeFile">The Windows Runtime IStorageFile object to read from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsRuntimeFile" /> is null.</exception>
      <exception cref="T:System.IO.IOException">The file could not be opened or retrieved as a stream.</exception>
    </member>
    <member name="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFolder,System.String)">
      <summary>Retrieves a stream for reading from a file in the specified parent folder.</summary>
      <returns>A task that represents the asynchronous read operation.</returns>
      <param name="rootDirectory">The Windows Runtime IStorageFolder object that contains the file to read from.</param>
      <param name="relativePath">The path, relative to the root folder, to the file to read from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootDirectory" /> or <paramref name="relativePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativePath" /> is empty or contains only white-space characters.</exception>
      <exception cref="T:System.IO.IOException">The file could not be opened or retrieved as a stream.</exception>
    </member>
    <member name="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFile)">
      <summary>Retrieves a stream for writing to a specified file.</summary>
      <returns>A task that represents the asynchronous write operation.</returns>
      <param name="windowsRuntimeFile">The Windows Runtime IStorageFile object to write to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsRuntimeFile" /> is null.</exception>
      <exception cref="T:System.IO.IOException">The file could not be opened or retrieved as a stream.</exception>
    </member>
    <member name="M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFolder,System.String,Windows.Storage.CreationCollisionOption)">
      <summary>Retrieves a stream for writing to a file in the specified parent folder.</summary>
      <returns>A task that represents the asynchronous write operation.</returns>
      <param name="rootDirectory">The Windows Runtime IStorageFolder object that contains the file to write to.</param>
      <param name="relativePath">The path, relative to the root folder, to the file to write to.</param>
      <param name="creationCollisionOption">The Windows Runtime CreationCollisionOption enumeration value that specifies the behavior to use when the name of the file to create is the same as the name of an existing file.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootDirectory" /> or <paramref name="relativePath" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativePath" /> is empty or contains only white-space characters.</exception>
      <exception cref="T:System.IO.IOException">The file could not be opened or retrieved as a stream.</exception>
    </member>
    <member name="T:System.IO.WindowsRuntimeStreamExtensions">
      <summary>Contains extension methods for converting between streams in the Windows Runtime and managed streams in the .NET APIs for Metro style apps.</summary>
    </member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)">
      <summary>Converts a managed stream in the .NET APIs for Metro style apps to an input stream in the Windows Runtime.</summary>
      <returns>A Windows Runtime IInputStream object that represents the converted stream.</returns>
      <param name="stream">The stream to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
    </member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)">
      <summary>Converts a managed stream in the .NET APIs for Metro style apps to an output stream in the Windows Runtime.</summary>
      <returns>A Windows Runtime IOutputStream object that represents the converted stream.</returns>
      <param name="stream">The stream to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
    </member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream)"></member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsStream(Windows.Storage.Streams.IRandomAccessStream,System.Int32)"></member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream)">
      <summary>Converts an input stream in the Windows Runtime  to a managed stream in the .NET APIs for Metro style apps.</summary>
      <returns>The converted stream.</returns>
      <param name="windowsRuntimeStream">The Windows Runtime IInputStream object to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsRuntimeStream" /> is null.</exception>
    </member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead(Windows.Storage.Streams.IInputStream,System.Int32)"></member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream)">
      <summary>Converts an output stream in the Windows Runtime  to a managed stream in the .NET APIs for Metro style apps.</summary>
      <returns>The converted stream.</returns>
      <param name="windowsRuntimeStream">The Windows Runtime IOutputStream object to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="windowsRuntimeStream" /> is null.</exception>
    </member>
    <member name="M:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite(Windows.Storage.Streams.IOutputStream,System.Int32)"></member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo">
      <summary>Provides factory methods to construct representations of managed tasks that are compatible with Windows Runtime asynchronous actions and operations. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
      <summary>Creates and starts a Windows Runtime asynchronous operation by using a function that generates a started task that returns results. The task can support cancellation. </summary>
      <returns>A started Windows.Foundation.IAsyncOperation&lt;TResult&gt; instance that represents the task that is generated by <paramref name="taskProvider" />. </returns>
      <param name="taskProvider">A delegate that represents the function that creates and starts the task. The started task is represented by the Windows Runtime asynchronous operation that is returned. The function is passed a cancellation token that the task can monitor to be notified of cancellation requests; you can ignore the token if your task does not support cancellation. </param>
      <typeparam name="TResult">The type that returns the result. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="taskProvider" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="taskProvider" /> returns an unstarted task. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>Creates and starts a Windows Runtime asynchronous action by using a function that generates a started task. The task can support cancellation. </summary>
      <returns>A started Windows.Foundation.IAsyncAction instance that represents the task that is generated by <paramref name="taskProvider" />. </returns>
      <param name="taskProvider">A delegate that represents the function that creates and starts the task. The started task is represented by the Windows Runtime asynchronous action that is returned. The function is passed a cancellation token that the task can monitor to be notified of cancellation requests; you can ignore the token if your task does not support cancellation. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="taskProvider" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="taskProvider" /> returns an unstarted task. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run``2(System.Func{System.Threading.CancellationToken,System.IProgress{``1},System.Threading.Tasks.Task{``0}})">
      <summary>Creates and starts a Windows Runtime asynchronous operation that includes progress updates, by using a function that generates a started task that returns results. The task can support cancellation and progress reporting. </summary>
      <returns>A started Windows.Foundation.IAsyncOperationWithProgress&lt;TResult,TProgress&gt; instance that represents the task that is generated by <paramref name="taskProvider" />. </returns>
      <param name="taskProvider">A delegate that represents the function that creates and starts the task. The started task is represented by the Windows Runtime asynchronous action that is returned. The function is passed a cancellation token that the task can monitor to be notified of cancellation requests, and an interface for reporting progress; you can ignore either or both of these arguments if your task does not support progress reporting or cancellation. </param>
      <typeparam name="TResult">The type that returns the result. </typeparam>
      <typeparam name="TProgress">The type that is used for progress notifications. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="taskProvider" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="taskProvider" /> returns an unstarted task. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run``1(System.Func{System.Threading.CancellationToken,System.IProgress{``0},System.Threading.Tasks.Task})">
      <summary>Creates and starts a Windows Runtime asynchronous action that includes progress updates, by using a function that generates a started task. The task can support cancellation and progress reporting. </summary>
      <returns>A started Windows.Foundation.IAsyncActionWithProgress&lt;TProgress&gt; instance that represents the task that is generated by <paramref name="taskProvider" />. </returns>
      <param name="taskProvider">A delegate that represents the function that creates and starts the task. The started task is represented by the Windows Runtime asynchronous action that is returned. The function is passed a cancellation token that the task can monitor to be notified of cancellation requests, and an interface for reporting progress; you can ignore either or both of these arguments if your task does not support progress reporting or cancellation. </param>
      <typeparam name="TProgress">The type that is used for progress notifications. </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="taskProvider" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="taskProvider" /> returns an unstarted task. </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBuffer">
      <summary>Provides an implementation of the Windows Runtime IBuffer interface (Windows.Storage.Streams.IBuffer), and all additional required interfaces. </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBuffer.Create(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Returns a Windows.Storage.Streams.IBuffer interface that contains a specified range of bytes copied from a byte array. If the specified capacity is greater than the number of bytes copied, the rest of the buffer is zero-filled. </summary>
      <returns>A Windows.Storage.Streams.IBuffer interface that contains the specified range of bytes. If <paramref name="capacity" /> is greater than <paramref name="length" />, the rest of the buffer is zero-filled. </returns>
      <param name="data">The byte array to copy from. </param>
      <param name="offset">The offset in <paramref name="data" /> from which copying begins. </param>
      <param name="length">The number of bytes to copy. </param>
      <param name="capacity">The maximum number of bytes the buffer can hold; if this is greater than <paramref name="length" />, the rest of the bytes in the buffer are initialized to 0 (zero).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />, <paramref name="offset" />, or <paramref name="length" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null. </exception>
      <exception cref="T:System.ArgumentException">Starting at <paramref name="offset" />, <paramref name="data" /> does not contain <paramref name="length" /> elements. -or-Starting at <paramref name="offset" />, <paramref name="data" /> does not contain <paramref name="capacity" /> elements. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBuffer.Create(System.Int32)">
      <summary>Returns an empty Windows.Storage.Streams.IBuffer interface that has the specified maximum capacity. </summary>
      <returns>A Windows.Storage.Streams.IBuffer interface that has the specified capacity and a Length property equal to 0 (zero). </returns>
      <param name="capacity">The maximum number of bytes the buffer can hold. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0 (zero). </exception>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions">
      <summary>Provides extension methods for operating on Windows Runtime buffers (Windows.Storage.Streams.IBuffer interface). </summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.AsBuffer(System.Byte[])">
      <summary>Returns a Windows.Storage.Streams.IBuffer interface that represents the specified byte array. </summary>
      <returns>A Windows.Storage.Streams.IBuffer interface that represents the specified byte array. </returns>
      <param name="source">The array to represent. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.AsBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>Returns a Windows.Storage.Streams.IBuffer interface that represents a range of bytes in the specified byte array. </summary>
      <returns>An IBuffer interface that represents the specified range of bytes in <paramref name="source" />.</returns>
      <param name="source">The array that contains the range of bytes that is represented by the IBuffer. </param>
      <param name="offset">The offset in <paramref name="source" /> where the range begins. </param>
      <param name="length">The length of the range that is represented by the IBuffer. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="length" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">The array is not large enough to serve as a backing store for the IBuffer; that is, the number of bytes in <paramref name="source" />, beginning at <paramref name="offset" />, is less than <paramref name="length" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.AsBuffer(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Returns a Windows.Storage.Streams.IBuffer interface that represents a range of bytes in the specified byte array. Optionally sets the Length property of the IBuffer to a value that is less than the capacity. </summary>
      <returns>An IBuffer interface that represents the specified range of bytes in <paramref name="source" /> and that has the specified Length property value. </returns>
      <param name="source">The array that contains the range of bytes that is represented by the IBuffer. </param>
      <param name="offset">The offset in <paramref name="source" /> where the range begins. </param>
      <param name="length">The value of the Length property of the IBuffer. </param>
      <param name="capacity">The size of the range that is represented by the IBuffer. The Capacity property of the IBuffer is set to this value. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />, <paramref name="length" />, or <paramref name="capacity" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> is greater than <paramref name="capacity" />. -or-The array is not large enough to serve as a backing store for the IBuffer; that is, the number of bytes in <paramref name="source" />, beginning at <paramref name="offset" />, is less than <paramref name="length" /> or <paramref name="capacity" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.AsStream(Windows.Storage.Streams.IBuffer)">
      <summary>Returns a stream that represents the same memory that the specified Windows.Storage.Streams.IBuffer interface represents. </summary>
      <returns>A stream that represents the same memory that the specified Windows.Storage.Streams.IBuffer interface represents. </returns>
      <param name="source">The IBuffer to represent as a stream. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(System.Byte[],System.Int32,Windows.Storage.Streams.IBuffer,System.UInt32,System.Int32)">
      <summary>Copies bytes from the source array to the destination buffer (Windows.Storage.Streams.IBuffer), specifying the starting index in the source array, the starting index in the destination buffer, and the number of bytes to copy. The method does not update the Length property of the destination buffer. </summary>
      <param name="source">The array to copy data from. </param>
      <param name="sourceIndex">The index in <paramref name="source" /> to begin copying data from. </param>
      <param name="destination">The buffer to copy data to. </param>
      <param name="destinationIndex">The index in <paramref name="destination" /> to begin copying data to. </param>
      <param name="count">The number of bytes to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />, <paramref name="sourceIndex" />, or <paramref name="destinationIndex" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> is greater than or equal to the length of <paramref name="source" />. -or-The number of bytes in <paramref name="source" />, beginning at <paramref name="sourceIndex" />, is less than <paramref name="count" />. -or-Copying <paramref name="count" /> bytes, beginning at <paramref name="destinationIndex" />, would exceed the capacity of <paramref name="destination" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(System.Byte[],Windows.Storage.Streams.IBuffer)">
      <summary>Copies all bytes from the source array to the destination buffer (Windows.Storage.Streams.IBuffer), starting at offset 0 (zero) in both. The method does not update the length of the destination buffer. </summary>
      <param name="source">The array to copy data from. </param>
      <param name="destination">The buffer to copy data to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="source" /> exceeds the capacity of <paramref name="destination" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(Windows.Storage.Streams.IBuffer,System.Byte[])">
      <summary>Copies all bytes from the source buffer (Windows.Storage.Streams.IBuffer) to the destination array, starting at offset 0 (zero) in both. </summary>
      <param name="source">The buffer to copy data from. </param>
      <param name="destination">The array to copy data to. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="source" /> exceeds the size of <paramref name="destination" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(Windows.Storage.Streams.IBuffer,System.UInt32,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies bytes from the source buffer (Windows.Storage.Streams.IBuffer) to the destination array, specifying the starting index in the source buffer, the starting index in the destination array, and the number of bytes to copy. </summary>
      <param name="source">The buffer to copy data from. </param>
      <param name="sourceIndex">The index in <paramref name="source" /> to begin copying data from. </param>
      <param name="destination">The array to copy data to. </param>
      <param name="destinationIndex">The index in <paramref name="destination" /> to begin copying data to. </param>
      <param name="count">The number of bytes to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />, <paramref name="sourceIndex" />, or <paramref name="destinationIndex" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> is greater than or equal to the capacity of <paramref name="source" />. -or-<paramref name="destinationIndex" /> is greater than or equal to the length of <paramref name="destination" />. -or-The number of bytes in <paramref name="source" />, beginning at <paramref name="sourceIndex" />, is less than <paramref name="count" />. -or-Copying <paramref name="count" /> bytes, beginning at <paramref name="destinationIndex" />, would exceed the size of <paramref name="destination" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(Windows.Storage.Streams.IBuffer,System.UInt32,Windows.Storage.Streams.IBuffer,System.UInt32,System.UInt32)">
      <summary>Copies bytes from the source buffer (Windows.Storage.Streams.IBuffer) to the destination buffer, specifying the starting index in the source, the starting index in the destination, and the number of bytes to copy.</summary>
      <param name="source">The buffer to copy data from. </param>
      <param name="sourceIndex">The index in <paramref name="source" /> to begin copying data from. </param>
      <param name="destination">The buffer to copy data to. </param>
      <param name="destinationIndex">The index in <paramref name="destination" /> to begin copying data to. </param>
      <param name="count">The number of bytes to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />, <paramref name="sourceIndex" />, or <paramref name="destinationIndex" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> is greater than or equal to the capacity of <paramref name="source" />. -or-<paramref name="destinationIndex" /> is greater than or equal to the capacity of <paramref name="destination" />. -or-The number of bytes in <paramref name="source" />, beginning at <paramref name="sourceIndex" />, is less than <paramref name="count" />. -or-Copying <paramref name="count" /> bytes, beginning at <paramref name="destinationIndex" />, would exceed the capacity of <paramref name="destination" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.CopyTo(Windows.Storage.Streams.IBuffer,Windows.Storage.Streams.IBuffer)">
      <summary>Copies all bytes from the source buffer (Windows.Storage.Streams.IBuffer) to the destination buffer, starting at offset 0 (zero) in both. </summary>
      <param name="source">The source buffer. </param>
      <param name="destination">The destination buffer. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="destination" /> is null. </exception>
      <exception cref="T:System.ArgumentException">The size of <paramref name="source" /> exceeds the capacity of <paramref name="destination" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.GetByte(Windows.Storage.Streams.IBuffer,System.UInt32)">
      <summary>Returns the byte at the specified offset in the specified Windows.Storage.Streams.IBuffer interface.</summary>
      <returns>The byte at the specified offset. </returns>
      <param name="source">The buffer to get the byte from. </param>
      <param name="byteOffset">The offset of the byte. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteOffset" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteOffset" /> is greater than or equal to the capacity of <paramref name="source" />. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.GetWindowsRuntimeBuffer(System.IO.MemoryStream)">
      <summary>Returns a Windows.Storage.Streams.IBuffer interface that represents the same memory as the specified memory stream. </summary>
      <returns>A Windows.Storage.Streams.IBuffer interface that is backed by the same memory that backs the specified memory stream.</returns>
      <param name="underlyingStream">The stream that provides the backing memory for the IBuffer. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.GetWindowsRuntimeBuffer(System.IO.MemoryStream,System.Int32,System.Int32)">
      <summary>Returns a Windows.Storage.Streams.IBuffer interface that represents a region within the memory that the specified memory stream represents. </summary>
      <returns>A Windows.Storage.Streams.IBuffer interface that is backed by a region within the memory that backs the specified memory stream. </returns>
      <param name="underlyingStream">The stream that shares memory with the IBuffer. </param>
      <param name="positionInStream">The position of the shared memory region in <paramref name="underlyingStream" />. </param>
      <param name="length">The maximum size of the shared memory region. If the number of bytes in <paramref name="underlyingStream" />, starting at <paramref name="positionInStream" />, is less than <paramref name="length" />, the IBuffer that is returned represents only the available bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="underlyingStream" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="positionInStream" /> or <paramref name="length" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="positionInStream" /> is beyond the end of <paramref name="source" />. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="underlyingStream" /> cannot expose its underlying memory buffer. </exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="underlyingStream" /> has been closed. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.IsSameData(Windows.Storage.Streams.IBuffer,Windows.Storage.Streams.IBuffer)">
      <summary>Returns a value that indicates whether two buffers (Windows.Storage.Streams.IBuffer objects) represent the same underlying memory region. </summary>
      <returns>true if the memory regions that are represented by the two buffers have the same starting point; otherwise, false. </returns>
      <param name="buffer">The first buffer. </param>
      <param name="otherBuffer">The second buffer. </param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.ToArray(Windows.Storage.Streams.IBuffer)">
      <summary>Returns a new array that is created from the contents of the specified buffer (Windows.Storage.Streams.IBuffer). The size of the array is the value of the Length property of the IBuffer. </summary>
      <returns>A byte array that contains the bytes in the specified IBuffer, beginning at offset 0 (zero) and including a number of bytes equal to the value of the Length property of the IBuffer. </returns>
      <param name="source">The buffer whose contents populate the new array. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBufferExtensions.ToArray(Windows.Storage.Streams.IBuffer,System.UInt32,System.Int32)">
      <summary>Returns a new array that is created from the contents of the specified buffer (Windows.Storage.Streams.IBuffer), starting at a specified offset and including a specified number of bytes. </summary>
      <returns>A byte array that contains the specified range of bytes. </returns>
      <param name="source">The buffer whose contents populate the new array. </param>
      <param name="sourceIndex">The index in <paramref name="source" /> to begin copying data from. </param>
      <param name="count">The number of bytes to copy. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="sourceIndex" /> is less than 0 (zero). </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> is greater than or equal to the capacity of <paramref name="source" />. -or-The number of bytes in <paramref name="source" />, beginning at <paramref name="sourceIndex" />, is less than <paramref name="count" />. </exception>
    </member>
  </members>
</doc>